name: Auto-Release on PR Merge with Version Change

on:
  pull_request:
    types: [closed]
    branches:
      - master
      - main

permissions:
  contents: write

jobs:
  check-and-release:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: windows-latest
    
    steps:
    - name: Checkout merged code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version comparison

    - name: Get version from current master
      id: current_version
      shell: powershell
      run: |
        # Find AssemblyInfo.cs in current (merged) code
        $assemblyInfoFile = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter 'AssemblyInfo.cs' -Recurse | Select-Object -First 1
        if (-not $assemblyInfoFile) {
          Write-Error "AssemblyInfo.cs not found in current branch"
          exit 1
        }
        
        Write-Host "Found AssemblyInfo.cs at: $($assemblyInfoFile.FullName)"
        $content = Get-Content $assemblyInfoFile.FullName -Raw
        
        if ($content -match '\[assembly:\s*AssemblyVersion\s*\(\s*"(\d+)\.(\d+)\.(\d+)\.(\d+)"\s*\)\]') {
          $major = $matches[1]
          $minor = $matches[2]
          $patch = $matches[3]
          $build = $matches[4]
          
          $version = "$major.$minor.$patch"
          $fullVersion = "$major.$minor.$patch.$build"
          
          Write-Host "Current version after merge: $version (full: $fullVersion)"
          
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "full_version=$fullVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "major=$major" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "minor=$minor" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "patch=$patch" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        } else {
          Write-Error "Could not extract AssemblyVersion from current AssemblyInfo.cs"
          exit 1
        }

    - name: Get version from base branch before merge
      id: previous_version
      shell: powershell
      run: |
        # Get the commit before the merge
        $baseCommit = "${{ github.event.pull_request.base.sha }}"
        Write-Host "Checking out base commit: $baseCommit"
        
        # Temporarily checkout the base commit to read old version
        git checkout $baseCommit 2>$null
        
        $assemblyInfoFile = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter 'AssemblyInfo.cs' -Recurse | Select-Object -First 1
        if (-not $assemblyInfoFile) {
          Write-Host "AssemblyInfo.cs not found in base branch (might be a new file)"
          # If file doesn't exist in base, consider version as 0.0.0
          $prevVersion = "0.0.0"
          $prevMajor = 0
          $prevMinor = 0
          $prevPatch = 0
        } else {
          $content = Get-Content $assemblyInfoFile.FullName -Raw
          
          if ($content -match '\[assembly:\s*AssemblyVersion\s*\(\s*"(\d+)\.(\d+)\.(\d+)\.(\d+)"\s*\)\]') {
            $prevMajor = [int]$matches[1]
            $prevMinor = [int]$matches[2]
            $prevPatch = [int]$matches[3]
            $prevVersion = "$prevMajor.$prevMinor.$prevPatch"
            
            Write-Host "Previous version before merge: $prevVersion"
          } else {
            Write-Host "Could not extract version from base branch, assuming 0.0.0"
            $prevVersion = "0.0.0"
            $prevMajor = 0
            $prevMinor = 0
            $prevPatch = 0
          }
        }
        
        # Return to merged state
        git checkout -
        
        echo "version=$prevVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "major=$prevMajor" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "minor=$prevMinor" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "patch=$prevPatch" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Compare versions
      id: version_check
      shell: powershell
      run: |
        $currentMajor = [int]"${{ steps.current_version.outputs.major }}"
        $currentMinor = [int]"${{ steps.current_version.outputs.minor }}"
        $currentPatch = [int]"${{ steps.current_version.outputs.patch }}"
        
        $prevMajor = [int]"${{ steps.previous_version.outputs.major }}"
        $prevMinor = [int]"${{ steps.previous_version.outputs.minor }}"
        $prevPatch = [int]"${{ steps.previous_version.outputs.patch }}"
        
        $versionIncreased = $false
        $changeType = "none"
        
        if ($currentMajor -gt $prevMajor) {
          $versionIncreased = $true
          $changeType = "major"
        } elseif ($currentMajor -eq $prevMajor) {
          if ($currentMinor -gt $prevMinor) {
            $versionIncreased = $true
            $changeType = "minor"
          } elseif ($currentMinor -eq $prevMinor) {
            if ($currentPatch -gt $prevPatch) {
              $versionIncreased = $true
              $changeType = "patch"
            }
          }
        }
        
        Write-Host "Version comparison:"
        Write-Host "  Previous: ${{ steps.previous_version.outputs.version }}"
        Write-Host "  Current:  ${{ steps.current_version.outputs.version }}"
        Write-Host "  Changed:  $versionIncreased ($changeType update)"
        
        echo "version_increased=$versionIncreased" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "change_type=$changeType" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Exit if version not increased
      if: steps.version_check.outputs.version_increased == 'false'
      run: |
        Write-Host "Version has not increased. No release will be created."
        Write-Host "To trigger a release, increase the version in AssemblyInfo.cs before merging."
        exit 0

    - name: Check if tag already exists
      if: steps.version_check.outputs.version_increased == 'true'
      id: check_tag
      shell: bash
      run: |
        if git rev-parse "v${{ steps.current_version.outputs.version }}" >/dev/null 2>&1; then
          echo "Tag v${{ steps.current_version.outputs.version }} already exists"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Tag v${{ steps.current_version.outputs.version }} does not exist"
          echo "tag_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Exit if tag exists
      if: steps.check_tag.outputs.tag_exists == 'true'
      run: |
        Write-Host "Release v${{ steps.current_version.outputs.version }} already exists. Skipping."
        exit 0

    # Build steps only run if version increased and tag doesn't exist
    - name: Clear NuGet cache
      if: steps.version_check.outputs.version_increased == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      shell: powershell
      run: nuget locals all -clear

    - name: Find Solution and Project Files
      if: steps.version_check.outputs.version_increased == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      id: find_files
      shell: powershell
      run: |
        $solutionFile = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter '*.sln' -Recurse | Select-Object -First 1 -ExpandProperty FullName
        if (-not $solutionFile) {
          Write-Error "Solution file not found."
          exit 1
        }
        Write-Host "Found solution file: $solutionFile"

        $projectFile = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter '*.csproj' -Recurse | Select-Object -First 1 -ExpandProperty FullName
        if (-not $projectFile) {
          Write-Error "Project file not found."
          exit 1
        }
        Write-Host "Found project file: $projectFile"

        echo "solution_file=$solutionFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "project_file=$projectFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Restore NuGet packages
      if: steps.version_check.outputs.version_increased == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      shell: powershell
      run: nuget restore "${{ steps.find_files.outputs.solution_file }}"

    - name: Locate MSBuild
      if: steps.version_check.outputs.version_increased == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      id: msbuild
      shell: powershell
      run: |
        $vsInstallPath = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" `
          -latest `
          -products * `
          -requires Microsoft.Component.MSBuild `
          -property installationPath
        $msbuildPath = Join-Path $vsInstallPath 'MSBuild\Current\Bin\MSBuild.exe'
        Write-Host "MSBuild path: $msbuildPath"
        echo "msbuild_path=$msbuildPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Build solution
      if: steps.version_check.outputs.version_increased == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      shell: powershell
      run: |
        & "${{ steps.msbuild.outputs.msbuild_path }}" "${{ steps.find_files.outputs.solution_file }}" /p:Configuration=Release /p:Platform="Any CPU"

    - name: Determine Output Executable Name
      if: steps.version_check.outputs.version_increased == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      id: exe_info
      shell: powershell
      run: |
        $projectFile = "${{ steps.find_files.outputs.project_file }}"
        [xml]$csprojXml = Get-Content $projectFile

        $assemblyName = $null
        $outputType = $null

        foreach ($pg in $csprojXml.Project.PropertyGroup) {
          if (-not $assemblyName -and $pg.AssemblyName) {
            $assemblyName = $pg.AssemblyName
          }
          if (-not $outputType -and $pg.OutputType) {
            $outputType = $pg.OutputType
          }
          if ($assemblyName -and $outputType) { break }
        }

        if (-not $assemblyName) {
          $assemblyName = [System.IO.Path]::GetFileNameWithoutExtension($projectFile)
        }

        if (-not $outputType) {
          Write-Error "OutputType not specified in project file."
          exit 1
        }

        switch ($outputType.ToLower()) {
          "winexe" { $extension = ".exe" }
          "exe"    { $extension = ".exe" }
          "library"{ $extension = ".dll" }
          default  {
            Write-Error "Unknown OutputType: $outputType"
            exit 1
          }
        }

        $exeName = "$assemblyName$extension"
        echo "exe_name=$exeName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Verify Executable Exists
      if: steps.version_check.outputs.version_increased == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      shell: powershell
      run: |
        $exePath = "bin/Release/${{ steps.exe_info.outputs.exe_name }}"
        if (!(Test-Path -Path $exePath)) {
          Write-Error "Executable not found at $exePath"
          exit 1
        }
        Write-Host "Executable found at $exePath"

    - name: Create Release
      if: steps.version_check.outputs.version_increased == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.current_version.outputs.version }}
        release_name: Release ${{ steps.current_version.outputs.version }}
        body: |
          ## Release ${{ steps.current_version.outputs.version }}
          
          **Version update type:** ${{ steps.version_check.outputs.change_type }}
          **Previous version:** ${{ steps.previous_version.outputs.version }}
          **Full version:** ${{ steps.current_version.outputs.full_version }}
          
          ### Pull Request Information
          **PR #${{ github.event.pull_request.number }}:** ${{ github.event.pull_request.title }}
          **Merged by:** @${{ github.event.pull_request.merged_by.login }}
          **Commit:** ${{ github.sha }}
          
          ### Changes
          View the [pull request](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}) for details.
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: steps.version_check.outputs.version_increased == 'true' && steps.check_tag.outputs.tag_exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/Release/${{ steps.exe_info.outputs.exe_name }}
        asset_name: ${{ steps.exe_info.outputs.exe_name }}
        asset_content_type: application/octet-stream

    - name: Summary
      if: always()
      run: |
        if ("${{ steps.version_check.outputs.version_increased }}" -eq "true") {
          if ("${{ steps.check_tag.outputs.tag_exists }}" -eq "true") {
            echo "## ⚠️ Release Skipped" >> $GITHUB_STEP_SUMMARY
            echo "Version was increased to ${{ steps.current_version.outputs.version }} but tag already exists." >> $GITHUB_STEP_SUMMARY
          } else {
            echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** ${{ steps.previous_version.outputs.version }} → ${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Change type:** ${{ steps.version_check.outputs.change_type }}" >> $GITHUB_STEP_SUMMARY
            echo "**Tag:** v${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Asset:** ${{ steps.exe_info.outputs.exe_name }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "View release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          }
        } else {
          echo "## ℹ️ No Release Created" >> $GITHUB_STEP_SUMMARY
          echo "Version remained at ${{ steps.current_version.outputs.version }} - no changes detected." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To create a release, increase the version in AssemblyInfo.cs before merging the PR." >> $GITHUB_STEP_SUMMARY
        }
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PR #${{ github.event.pull_request.number }}:** ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
        echo "**Merged by:** @${{ github.event.pull_request.merged_by.login }}" >> $GITHUB_STEP_SUMMARY
